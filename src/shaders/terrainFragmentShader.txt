#version 400 core

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 lightVector[3];
uniform vec3 attenuation[3];
in vec3 cameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

    vec4 blendMapColour = texture(blendMap, passTextureCoords);
    
    float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoords = passTextureCoords * 40.0;
    vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
    vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
    vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
    
    vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
    vec3 unitVectorCamera = normalize(cameraVector);
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    
    for(int i=0; i<3; i++){
    	vec3 unitLightVector = normalize(lightVector[i]);
    	float distance = length(lightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
    	float nDot1 = dot(unitNormal, unitLightVector);
    	float brightness = max(nDot1,0.0);
	    vec3 lightDirection = -unitLightVector;
	    vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
    	float specularFactor = dot(reflectedLightDirection , unitVectorCamera);
    	specularFactor = max(specularFactor, 0.0);
    	float dampedFactor = pow(specularFactor,shineDamper);
    	totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
    	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
    }
    totalDiffuse = max(totalDiffuse, 0.2);

    out_Color = vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular,1.0);
    out_Color = mix(vec4(skyColour,1.0), out_Color, visibility);   
}