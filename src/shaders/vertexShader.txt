#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normals;

out vec2 passTextureCoords;
out vec3 surfaceNormal;
out vec3 lightVector[3];
out vec3 cameraVector;
out float visibility;
out float camDistance;

const float density = 0.005;
const float gradient = 8.0; 

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[3];
uniform float useFakeLighting;

void main(void){

   vec4 worldPosition = transformationMatrix * vec4(position,1.0);
   vec4 positionRelativeToCam =  viewMatrix * worldPosition;
   gl_Position = projectionMatrix * positionRelativeToCam;
   passTextureCoords = textureCoords;
   
   vec3 actualNormal = normals;
   if(useFakeLighting > 0.5){
      actualNormal = vec3(0.0, 1.0, 0.0);
   }
   
   surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
   for(int i=0; i<3; i++){
      lightVector[i] = lightPosition[i] - worldPosition.xyz;
   }
   cameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
   
   float distance = length(positionRelativeToCam.xyz);
   visibility = exp(-pow((distance*density), gradient));
   visibility = clamp(visibility, 0.0, 1.0);
   camDistance = distance;   
   
}