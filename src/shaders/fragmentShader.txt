#version 400 core

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 lightVector[3];
in vec3 cameraVector;
in float visibility;
in float camDistance;

out vec4 out_Color;

uniform sampler2D texSample;
uniform vec3 lightColor[3];
uniform vec3 attenuation[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

    vec3 unitVectorCamera = normalize(cameraVector);
    vec3 unitNormal = normalize(surfaceNormal);
    
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    
    for(int i=0; i<3; i++){
        float distance = length(lightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
    	vec3 unitLightVector = normalize(lightVector[i]);
    	float nDot1 = dot(unitNormal, unitLightVector);
    	float brightness = max(nDot1,0.0);
    	vec3 lightDirection = -unitLightVector;
    	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
    	float specularFactor = dot(reflectedLightDirection , unitVectorCamera);
    	specularFactor = max(specularFactor, 0.0);
    	float dampedFactor = pow(specularFactor,shineDamper);
    	totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
    	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
    }
    totalDiffuse = max(totalDiffuse, 0.2);
    
    vec4 textureColour = texture(texSample, passTextureCoords);
    if(textureColour.a< 0.5){
       discard;
    }
    
    if(camDistance > 250){
      discard;
    }
    
    out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
    out_Color = mix(vec4(skyColour,1.0), out_Color, visibility);   
    
   
   //////////////////  gamma correction ///////////////////////////////////
   
  /*  
  
  	float gamma = 2.2;
	
	vec3 mapped = out_Color.rgb/(out_Color.rgb + vec3(1.0));
	
	mapped = pow(mapped, vec3(1.0/gamma));
	
	out_Color = vec4(mapped, 1.0);
		
	*/	
}